package GUI;

import FileOperations.Arffgen;
import FileOperations.ReadFile;
import SimilarityAndRanking.SiteRanker;
import SmartCrawler.HTMLUtils;
import SmartCrawler.LinksExtracter;
import SmartCrawler.ReverseSearch;
import SmartCrawler.SeedSites;
import classifier.C45CLassifier;
import classifier.Classifier;
import classifier.NaiveBayesClassifier;
import classifier.SVMClassifier;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.GridBagLayout;
import java.awt.Window;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import web.Crawler;
import web.ListLinks;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class MainFrame extends javax.swing.JFrame {

    SeedSites ss = new SeedSites();
    ReverseSearch rs = new ReverseSearch();
    ListLinks ll = new ListLinks();
    ReadFile rf = new ReadFile();
    String searchString = new String();
    SiteRanker sr = new SiteRanker();
    List<String> linkfrntr = new ArrayList<>();
//    StopwordRemove stop = new StopwordRemove();
//    Stemming stem = new Stemming();
    Map<String, List<String>> linksOfLink = new HashMap<>();
    PriorityQueue<String> HQueue = new PriorityQueue<>();
    PriorityQueue<String> LQueue = new PriorityQueue<>();
    PriorityQueue<String> topHQueue = new PriorityQueue<>();
    List<String> linkfrontier = new ArrayList<>();
    List<String> formfrontier = new ArrayList<>();
    List<String> file = new ArrayList<>();
//    TermFrequency tf = new TermFrequency();
    Map<Integer, Map<Integer, Double>> mapToFile = new HashMap<>();
    Map<Integer, Map<Integer, Double>> mapToFile1 = new HashMap<>();
    Map<String, List<String>> formLinks = new HashMap<>();
    PriorityQueue<String> searchableForms = new PriorityQueue<>();
    Set<String> linkList = new HashSet<>();
    Set<String> sett = new HashSet<>();
    Map<String, List<String>> frontier;
    static boolean flag = false;

    public MainFrame() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        final File folder = new File("dataset/");
        listFilesForFolder(folder);
        txtval();
        jButton3.setVisible(false);
        jDialog1.setLocationRelativeTo(null);
    }

    public void listFilesForFolder(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                listFilesForFolder(fileEntry);
            } else {
                file.add(fileEntry.getName());
                //System.out.println(fileEntry.getName());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField_SiteThreshhold = new javax.swing.JTextField();
        jTextField_searchString = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea_Frontier = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jTextField_LinkThreshold = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea_Classify = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea_linkfrontier = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jPanel28 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton8 = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog1.setBackground(java.awt.Color.white);
        jDialog1.setMinimumSize(new java.awt.Dimension(100, 100));
        jDialog1.setModalExclusionType(null);
        jDialog1.setName(""); // NOI18N
        jDialog1.setUndecorated(true);
        jDialog1.setResizable(false);

        jLabel1.setBackground(java.awt.Color.white);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/loading.gif"))); // NOI18N
        jDialog1.getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 255));
        jTabbedPane1.setForeground(new java.awt.Color(61, 69, 203));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(217, 168, 239));
        jPanel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(new java.awt.Color(0, 128, 128));
        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jPanel11.setBackground(new java.awt.Color(233, 246, 199));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)), "Seed Sites", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel11.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jPanel11);

        jPanel9.add(jScrollPane1);

        jPanel12.setBackground(new java.awt.Color(233, 246, 199));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)), "Deep websites", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel12.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(jPanel12);

        jPanel9.add(jScrollPane2);

        jPanel5.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel10.setBackground(new java.awt.Color(189, 183, 107));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Site Threshold : ");
        jLabel3.setPreferredSize(new java.awt.Dimension(6, 38));

        jTextField_SiteThreshhold.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jTextField_searchString.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/images1.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField_SiteThreshhold, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jTextField_searchString, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(139, 139, 139))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField_searchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField_SiteThreshhold)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Deep Web Sites", jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(95, 158, 160));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel13.setBackground(new java.awt.Color(233, 246, 199));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)), "Site Frontier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 13), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel13.setLayout(new java.awt.BorderLayout());

        jTextArea_Frontier.setEditable(false);
        jTextArea_Frontier.setBackground(new java.awt.Color(233, 246, 199));
        jTextArea_Frontier.setColumns(20);
        jTextArea_Frontier.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextArea_Frontier.setRows(5);
        jScrollPane3.setViewportView(jTextArea_Frontier);

        jPanel13.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel14.setBackground(new java.awt.Color(189, 183, 107));
        jPanel14.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel14.setToolTipText("");

        jButton2.setBackground(new java.awt.Color(209, 227, 196));
        jButton2.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton2.setText("Reverse Search");
        jButton2.setBorder(new javax.swing.border.MatteBorder(null));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setMaximumSize(new java.awt.Dimension(68, 35));
        jButton2.setMinimumSize(new java.awt.Dimension(68, 35));
        jButton2.setPreferredSize(new java.awt.Dimension(68, 35));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField_LinkThreshold.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField_LinkThreshold.setMaximumSize(new java.awt.Dimension(20, 35));
        jTextField_LinkThreshold.setMinimumSize(new java.awt.Dimension(20, 35));
        jTextField_LinkThreshold.setPreferredSize(new java.awt.Dimension(20, 35));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Link Threshold: ");
        jLabel4.setPreferredSize(new java.awt.Dimension(20, 35));

        jButton3.setBackground(new java.awt.Color(209, 227, 196));
        jButton3.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton3.setText(" Display ");
        jButton3.setBorder(new javax.swing.border.MatteBorder(null));
        jButton3.setMaximumSize(new java.awt.Dimension(89, 29));
        jButton3.setMinimumSize(new java.awt.Dimension(89, 29));
        jButton3.setPreferredSize(new java.awt.Dimension(89, 29));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_LinkThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_LinkThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel3.add(jPanel14, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Reverse Search", jPanel2);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setBackground(new java.awt.Color(60, 179, 113));
        jPanel16.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel16.setLayout(new java.awt.BorderLayout());

        jTextArea_Classify.setEditable(false);
        jTextArea_Classify.setBackground(new java.awt.Color(233, 246, 199));
        jTextArea_Classify.setColumns(20);
        jTextArea_Classify.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextArea_Classify.setRows(5);
        jScrollPane4.setViewportView(jTextArea_Classify);

        jPanel16.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jButton4.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton4.setText("Classify and Rank Sites");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton4, java.awt.BorderLayout.PAGE_START);

        jPanel15.add(jPanel16, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Site Classification", jPanel15);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel22.setBackground(new java.awt.Color(154, 205, 50));
        jPanel22.setLayout(new java.awt.BorderLayout());

        jTextArea_linkfrontier.setEditable(false);
        jTextArea_linkfrontier.setBackground(new java.awt.Color(233, 246, 199));
        jTextArea_linkfrontier.setColumns(20);
        jTextArea_linkfrontier.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextArea_linkfrontier.setRows(5);
        jScrollPane5.setViewportView(jTextArea_linkfrontier);

        jPanel22.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jButton5.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton5.setText("Display Ranked Links");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel22.add(jButton5, java.awt.BorderLayout.PAGE_START);

        jPanel19.add(jPanel22, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Link Frontier", jPanel19);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel24.setBackground(new java.awt.Color(135, 206, 235));
        jPanel24.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel24.setLayout(new javax.swing.BoxLayout(jPanel24, javax.swing.BoxLayout.LINE_AXIS));

        jPanel27.setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(233, 246, 199));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane7.setViewportView(jTextArea1);

        jPanel27.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jButton7.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton7.setText("Searchable Forms");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel27.add(jButton7, java.awt.BorderLayout.PAGE_START);

        jPanel24.add(jPanel27);

        jPanel28.setLayout(new java.awt.BorderLayout());

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(233, 246, 199));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane8.setViewportView(jTextArea2);

        jPanel28.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        jButton8.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jButton8.setText("Domain Specific Forms");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel28.add(jButton8, java.awt.BorderLayout.PAGE_START);

        jPanel24.add(jPanel28);

        jPanel23.add(jPanel24, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Form Classification", jPanel23);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel29.setBackground(new java.awt.Color(239, 239, 239));
        jPanel29.setLayout(new java.awt.BorderLayout());

        jLabel8.setBackground(new java.awt.Color(221, 230, 231));
        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/111.jpg"))); // NOI18N
        jPanel29.add(jLabel8, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel29, java.awt.BorderLayout.PAGE_START);

        jPanel30.setBackground(java.awt.Color.white);
        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Console"));
        jPanel30.setLayout(new java.awt.BorderLayout());

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(226, 223, 223));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane6.setViewportView(jTextArea3);

        jPanel30.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel30, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int thrhld = 0;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Window thisWin = SwingUtilities.getWindowAncestor(this);
        final JDialog progressDialog = new JDialog(thisWin, "Processing please wait....");
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(300, 100));
        final JProgressBar bar = new JProgressBar(0, 100);
        bar.setIndeterminate(true);
        contentPane.add(bar);
        progressDialog.setContentPane(contentPane);
        progressDialog.pack();
        progressDialog.setLocationRelativeTo(null);

        final SwingWorker worker = new SwingWorker<Void, String>() {
//            CalculateValues cv = new CalculateValues();

            @Override
            public Void doInBackground() {
                try {
//                    jDialog1.setVisible(true);
                    bar.setVisible(true);
                    bar.updateUI();
                    setProgress(0);

                    linksOfLink.clear();
                    int thrhld = Integer.parseInt(jTextField_SiteThreshhold.getText());
                    long startTime = System.currentTimeMillis();

//        container.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    jPanel11.removeAll();
                    jPanel11.revalidate();
                    jPanel12.removeAll();
                    jPanel12.revalidate();
                    searchString = jTextField_searchString.getText();
                    Integer threshold = Integer.parseInt(jTextField_SiteThreshhold.getText());
                    List<String> seedSite = ss.getSeedSites(searchString, threshold, file);
                    flag = false;
                    if (seedSite.isEmpty()) {
                        flag = true;
                        Crawler obj = new Crawler();
                        Set<String> result = obj.getDataFromGoogle(searchString, thrhld);
                        for (String temp : result) {
                            seedSite.add(temp);
//            System.out.println(temp);
                        }
                        System.out.println(result.size());
                    }

                    System.out.println(">>>>>>>>>>>>>> Before Ranking\n");
                    for (String seedSite1 : seedSite) {
                        System.out.println(seedSite1);
                    }
                    TreeMap<String, Double> map = sr.siteSimilarity(seedSite, searchString);
                    Set<String> afterRank = map.keySet();
                    System.out.println(">>>>>>>>>>>>>>> After Ranking\n");
                    for (String afterRank1 : afterRank) {
                        System.out.println(afterRank1);
                    }
                    //        jTextArea_seedLinks.setText("\n\t----------<< Feature Space of deep web sites (FSS) >>---------\n\n"+sb.toString());
                    //        JScrollPane scroller = new JScrollPane(jPanel1);
                    //        this.getContentPane().add(scroller);
                    for (String site : afterRank) {
                        if (site.equals("")) {
                            continue;
                        }
                        List<String> links = new ArrayList<>();
                        if (flag == true) {
                            links = ll.getWebpageLinks(site, thrhld);
                        } else {
                            links = rs.getLinks(searchString, site);
                        }

                        linksOfLink.put(site, links);
                        JLabel lbl = new JLabel();
                        lbl.setText(site);

                        jPanel11.add(lbl);
                        jPanel11.revalidate();
                        lbl.setFont(new Font("Serif", Font.PLAIN, 14));
                        lbl.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                        lbl.addMouseListener(new MouseAdapter() {

                            @Override
                            public void mouseEntered(java.awt.event.MouseEvent evt) {
                                lbl.setForeground(Color.BLUE);
                            }

                            @Override
                            public void mouseExited(java.awt.event.MouseEvent evt) {
                                lbl.setForeground(UIManager.getColor("control"));
                            }

                            @Override
                            public void mouseClicked(MouseEvent e) {
                                System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

                                jPanel12.removeAll();
                                jPanel12.revalidate();
                                List<String> links = new ArrayList<>();
                                String str = lbl.getText();
                                String searchString = jTextField_searchString.getText();
                                if (flag == true) {
                                    links = ll.getWebpageLinks(site, thrhld);
                                } else {
                                    links = rs.getLinks(searchString, str);
                                }

                                for (String link : links) {
                                    JLabel lbl1 = new JLabel();
                                    lbl1.setText(link);
                                    jPanel12.add(lbl1);
                                    jPanel12.revalidate();
//                        System.out.println(link);
                                }
                                jPanel12.revalidate();
                            }
                        });
                    }

                    rs.setLinksOfLink(linksOfLink);

                    long endTime = System.currentTimeMillis();
                    long duration = (endTime - startTime);
                    jTextArea3.append("Done with the search.\n");
                    jTextArea3.append("Total execution time: " + duration + " ms\n\n");
                    setProgress(100);

                } catch (Exception e) {
                    e.printStackTrace();
                }

                return null;
            }

            protected void process(List<String> messageList) {
                for (String message : messageList) {
                }
            }

            @Override
            public void done() {
//                jDialog1.dispose();
                progressDialog.dispose();
            }
        };
        progressDialog.setVisible(true);
//        jDialog1.setVisible(true);
        worker.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Window thisWin = SwingUtilities.getWindowAncestor(this);
        final JDialog progressDialog = new JDialog(thisWin, "Processing please wait....");
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(300, 100));
        final JProgressBar bar = new JProgressBar(0, 100);
        bar.setIndeterminate(true);
        contentPane.add(bar);
        progressDialog.setContentPane(contentPane);
        progressDialog.pack();
        progressDialog.setLocationRelativeTo(null);

        long startTime = System.currentTimeMillis();
        String search = jTextField_searchString.getText();

        final SwingWorker worker = new SwingWorker<Void, String>() {
//            CalculateValues cv = new CalculateValues();

            @Override
            public Void doInBackground() {
                try {
//                    jDialog1.setVisible(true);
                    bar.setVisible(true);
                    bar.updateUI();
                    setProgress(0);
                    frontier = rs.checkRelevence(search, flag, 5);
                    for (Map.Entry<String, List<String>> entrySet : frontier.entrySet()) {
//            String key = entrySet.getKey();
                        List<String> value = entrySet.getValue();
                        value.removeAll(Collections.singleton(""));
                        LQueue.addAll(value);
                    }
                    if (HQueue.isEmpty()) {
                        HQueue.addAll(LQueue);
                        LQueue.clear();
                    }

//        t.start();
                    long endTime = System.currentTimeMillis();
                    long duration = (endTime - startTime);
                    jTextArea3.append("Done with the Reverse Search process.\n");
                    jTextArea3.append("Total Execution time: " + duration + " ms\n\n");
                    setProgress(100);

                } catch (Exception e) {
                    e.printStackTrace();
                }

                return null;
            }

            protected void process(List<String> messageList) {
                for (String message : messageList) {
                }
            }

            @Override
            public void done() {
//                jDialog1.dispose();
                progressDialog.dispose();
            }
        };
//        jDialog1.setVisible(true);
        progressDialog.setVisible(true);
        worker.execute();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea_Frontier.setText("");
        Integer threshold = Integer.parseInt(jTextField_LinkThreshold.getText());
//        System.out.println(LQueue);
//        System.out.println(HQueue);
        topHQueue = rs.display(threshold, HQueue);
        linkfrontier.addAll(topHQueue);
        for (String top1 : topHQueue) {
            jTextArea_Frontier.append(top1 + "\n");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        Window thisWin = SwingUtilities.getWindowAncestor(this);
        final JDialog progressDialog = new JDialog(thisWin, "Processing please wait....");
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(300, 100));
        final JProgressBar bar = new JProgressBar(0, 100);
        bar.setIndeterminate(true);
        contentPane.add(bar);
        progressDialog.setContentPane(contentPane);
        progressDialog.pack();
        progressDialog.setLocationRelativeTo(null);

        final SwingWorker worker = new SwingWorker<Void, String>() {
//            CalculateValues cv = new CalculateValues();

            @Override
            public Void doInBackground() {
                try {
//                    jDialog1.setVisible(true);
                    bar.setVisible(true);
                    bar.updateUI();
                    setProgress(0);

                    long startTime = System.currentTimeMillis();
                    int doc = 1;
                    Classifier classifier = new Classifier();
                    for (Map.Entry<String, Map<String, Double>> entrySet : classifier.classify(topHQueue, flag).entrySet()) {
                        String key = entrySet.getKey();
                        Map<String, Double> value = entrySet.getValue();
                        System.out.println(key + "--->>");
                        System.out.println(value);
//            for (Map.Entry<String, Double> entrySet1 : value.entrySet()) {
//                String key1 = entrySet1.getKey();
//                Double value1 = entrySet1.getValue();
////                    bw.write(key + "," + key1 + "," + value1 + "\n");
//            }
                        int wordCnt = value.size();
                        Double weight = 0.0;
                        for (Map.Entry<String, Double> entrySet1 : value.entrySet()) {
                            weight = entrySet1.getValue();
                            break;
                        }
                        System.out.println(">>>>> " + doc + "=" + wordCnt + "=" + weight);
                        HashMap<Integer, Double> temp = new HashMap<>();
                        temp.put(wordCnt, weight);
                        mapToFile.put(doc, temp);
                        doc++;
                    }
                    Arffgen ag = new Arffgen();
                    Vector attr = new Vector();

                    attr.add("document");
                    attr.add("word");
                    attr.add("weight");
                    ag.IGArffFileGenerater(attr, mapToFile, "data_naiveBayes" + File.separator + "InputFile.arff", 3.0);
                    new NaiveBayesClassifier();
                    StringBuilder sb = rf.read("data_naiveBayes" + File.separator + "InputFile.arff", linkfrontier);
                    System.out.println(sb.toString());
//        jTextArea_Classify.setText(rf.getLinks().toString());

                    StringBuilder sb1 = new StringBuilder();
                    List<String> links = rf.getLinks();
                    System.out.println(">>>>>>>>>>>>>> Before Ranking\n");
                    for (String site : links) {
                        System.out.println(site);
                    }
                    TreeMap<String, Double> map = sr.siteSimilarity(links, searchString);
                    Set<String> afterRank = map.keySet();
                    System.out.println(">>>>>>>>>>>>>>> After Ranking\n");
                    for (String afterRank1 : afterRank) {
                        System.out.println(afterRank1);
                        linkfrntr.add(afterRank1);
                        sb1.append(afterRank1).append("\n");
                        System.out.println(">>" + afterRank1);
                    }
                    jTextArea_Classify.setText(sb1.toString());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;
                    jTextArea3.append("Site is Classified using Naive Bayes classifier.\n");
                    jTextArea3.append("Total Execution time: " + duration + " ms\n\n");
                    setProgress(100);

                } catch (Exception e) {
                    e.printStackTrace();
                }

                return null;
            }

            protected void process(List<String> messageList) {
                for (String message : messageList) {
                }
            }

            @Override
            public void done() {
//                jDialog1.dispose();
                progressDialog.dispose();
            }
        };
        progressDialog.setVisible(true);
//        jDialog1.setVisible(true);
        worker.execute();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        Window thisWin = SwingUtilities.getWindowAncestor(this);
        final JDialog progressDialog = new JDialog(thisWin, "Processing please wait....");
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(300, 100));
        final JProgressBar bar = new JProgressBar(0, 100);
        bar.setIndeterminate(true);
        contentPane.add(bar);
        progressDialog.setContentPane(contentPane);
        progressDialog.pack();
        progressDialog.setLocationRelativeTo(null);

        final SwingWorker worker = new SwingWorker<Void, String>() {
//            CalculateValues cv = new CalculateValues();

            @Override
            public Void doInBackground() {

                try {
//                    jDialog1.setVisible(true);
                    bar.setVisible(true);
                    bar.updateUI();
                    setProgress(0);

                    long startTime = System.currentTimeMillis();
                    StringBuilder sb = new StringBuilder();

                    Map<String, Set<String>> frmMap = new HashMap<>();
                    for (String linkfrntr1 : linkfrntr) {
                        Set<String> frm = new HashSet<>();
                        try {
                            List<String> links;
                            if (flag == true) {
                                links = ll.getWebpageLinks(linkfrntr1, thrhld);
                            } else {
                                links = LinksExtracter.extractLinks(linkfrntr1);
                            }
                            for (String extractLink : links) {
                                String relLink = extractLink;
                                relLink = relLink.replace("../", "");
                                if (relLink.contains(".htm")) {
//                        System.out.println("------>>> " + relLink);
                                    if (!relLink.toLowerCase().contains("javascript")) {
                                        frm.add(relLink);
                                    }
                                }
//                links.add(relLink);
                            }
                            frmMap.put(linkfrntr1, frm);
                            System.out.println("");
                        } catch (IOException ex) {
//            ex.printStackTrace();
                        }
                    }

                    if (flag == true) {
                        for (Map.Entry<String, Set<String>> entrySet : frmMap.entrySet()) {
                            String key = entrySet.getKey();
                            Set<String> value = entrySet.getValue();
                            System.out.println(key + "==>>");
                            for (String value1 : value) {
                                System.out.println(value1);
                                linkList.add(value1);
                            }
                        }
                    } else {
                        for (Map.Entry<String, Set<String>> entrySet : frmMap.entrySet()) {
                            String key = entrySet.getKey();
                            System.out.println();
                            Set<String> value = entrySet.getValue();
                            System.out.println(key + "==>>");
                            for (String value1 : value) {
                                System.out.println(value1);
                                String str = key.replace(System.getProperty("user.dir"), "");
                                str = str.substring(0, str.lastIndexOf(File.separator));
                                String res = System.getProperty("user.dir") + str + File.separator + value1;
//                System.out.println("==>>" + res);
                                linkList.add(res);
                            }
                        }
                    }

                    searchableForms.addAll(linkList);
                    formfrontier.addAll(searchableForms);

                    for (String formfrontier1 : formfrontier) {
                        try {
                            sb.append(formfrontier1).append("\n");
                            String text;
                            if (flag == true) {
                                text = HTMLUtils.extractWebText(formfrontier1);
                            } else {
                                text = HTMLUtils.extractText(formfrontier1);
                            }
                            System.out.println(text);
                            if (!text.equals("")) {
                                sett.add(formfrontier1);
                            }

                        } catch (IOException ex) {
//                ex.printStackTrace();
                        }
                    }
//        System.out.println(sett);
//        System.out.println(formLinks);
                    jTextArea_linkfrontier.setText(sb.toString());
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;
                    jTextArea3.append("Links are ranked.\n");
                    jTextArea3.append("Total Execution time : " + duration + " ms\n\n");
                    setProgress(100);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }

            protected void process(List<String> messageList) {
                for (String message : messageList) {
                }
            }

            @Override
            public void done() {
                jDialog1.dispose();
//                progressDialog.dispose();
            }
        };
//        progressDialog.setVisible(true);
        jDialog1.setVisible(true);
        worker.execute();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        Window thisWin = SwingUtilities.getWindowAncestor(this);
        final JDialog progressDialog = new JDialog(thisWin, "Processing please wait....");
        JPanel contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        contentPane.setPreferredSize(new Dimension(300, 100));
        final JProgressBar bar = new JProgressBar(0, 100);
        bar.setIndeterminate(true);
        contentPane.add(bar);
        progressDialog.setContentPane(contentPane);
        progressDialog.pack();
        progressDialog.setLocationRelativeTo(null);
        
        final SwingWorker worker = new SwingWorker<Void, String>() {
//            CalculateValues cv = new CalculateValues();

            @Override
            public Void doInBackground() {
                try {
//                    jDialog1.setVisible(true);
                    bar.setVisible(true);
                    bar.updateUI();
                    setProgress(0);

                    long startTime = System.currentTimeMillis();
                    int doc = 1;
                    Classifier classifier = new Classifier();
                    for (Map.Entry<String, Map<String, Double>> entrySet : classifier.classify(searchableForms, flag).entrySet()) {
                        String key = entrySet.getKey();
                        Map<String, Double> value = entrySet.getValue();
                        System.out.println(key + "--->>");
                        System.out.println(value);
//            for (Map.Entry<String, Double> entrySet1 : value.entrySet()) {
//                String key1 = entrySet1.getKey();
//                Double value1 = entrySet1.getValue();
////                    bw.write(key + "," + key1 + "," + value1 + "\n");
//            }
                        int wordCnt = value.size();
                        Double weight = 0.0;
                        for (Map.Entry<String, Double> entrySet1 : value.entrySet()) {
                            weight = entrySet1.getValue();
                            break;
                        }
                        System.out.println(">>>>> " + doc + "=" + wordCnt + "=" + weight);
                        HashMap<Integer, Double> temp = new HashMap<>();
                        temp.put(wordCnt, weight);
                        mapToFile1.put(doc, temp);
                        doc++;
                    }
                    Arffgen ag = new Arffgen();
                    Vector attr = new Vector();

                    attr.add("document");
                    attr.add("word");
                    attr.add("weight");
                    ag.IGArffFileGenerater(attr, mapToFile1, "data_svm" + File.separator + "train.arff", 4.5);
                    SVMClassifier svm = new SVMClassifier();
                    svm.classify("data_svm" + File.separator + "train.arff", "data_svm" + File.separator + "test.arff");
                    StringBuilder sb = rf.read("data_svm" + File.separator + "train.arff", formfrontier);
//        jTextArea_Classify.setText(rf.getLinks().toString());
                    jTextArea2.setText(sb.toString());

                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;
                    jTextArea3.append("Displaying Domain Specific forms.....\n");
                    jTextArea3.append("Total Execution time : " + duration + " ms\n\n");
                    setProgress(100);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }

            protected void process(List<String> messageList) {
                for (String message : messageList) {
                }
            }

            @Override
            public void done() {
                jDialog1.dispose();
//                progressDialog.dispose();
            }
        };
        jDialog1.setVisible(true);
//        progressDialog.setVisible(true);
        worker.execute();

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        long startTime = System.currentTimeMillis();
        C45CLassifier c45 = new C45CLassifier();
        for (String sett1 : sett) {
            jTextArea1.append(sett1 + "\n");
        }
//        jTextArea1.setText(c45.getSb().toString());
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        jTextArea3.append("Displaying Searchable forms..\n");
        jTextArea3.append("Total Execution time : " + duration + " ms\n\n");
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                try {
//                    UIManager.setLookAndFeel(new JoxyLookAndFeel());
//                    
                new MainFrame().setVisible(true);
//                } catch (UnsupportedLookAndFeelException ex) {
//                    ex.printStackTrace();
//                }
            }
        });
    }

//    public void run() {
//        for (int i = 0; i <= frontier.size(); i++) {
//            final int progress = i;
//            SwingUtilities.invokeLater(new Runnable() {
//                public void run() {
//                    jProgressBar.setValue(progress);
////                    outputTextArea.setText(outputTextArea.getText()
////                            + String.format("Completed %d%% of task.\n", progress));
//                }
//            });
//            try {
//                Thread.sleep(100);
//            } catch (InterruptedException e) {
//            }
//        }
//    }
    public void txtval() {
        jTextField_LinkThreshold.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn();
            }

            public void warn() {
                if (jTextField_LinkThreshold.getText().equals("")) {
                    jTextArea_Frontier.setText("");
                } else {
                    jTextArea_Frontier.setText("");
                    Integer threshold = Integer.parseInt(jTextField_LinkThreshold.getText());

                    topHQueue = rs.display(threshold, HQueue);
                    linkfrontier.addAll(topHQueue);
                    for (String top1 : topHQueue) {
                        jTextArea_Frontier.append(top1 + "\n");
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    public static javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    public static javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea_Classify;
    private javax.swing.JTextArea jTextArea_Frontier;
    private javax.swing.JTextArea jTextArea_linkfrontier;
    private javax.swing.JTextField jTextField_LinkThreshold;
    private javax.swing.JTextField jTextField_SiteThreshhold;
    private javax.swing.JTextField jTextField_searchString;
    // End of variables declaration//GEN-END:variables
}
